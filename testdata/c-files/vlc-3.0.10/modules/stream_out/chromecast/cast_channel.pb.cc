// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stream_out/chromecast/cast_channel.proto

#include "stream_out/chromecast/cast_channel.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/io/zero_copy_stream_impl_lite.h>
// This is a temporary google only hack
#ifdef GOOGLE_PROTOBUF_ENFORCE_UNIQUENESS
#include "third_party/protobuf/version.h"
#endif
// @@protoc_insertion_point(includes)

namespace protobuf_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto {
extern PROTOBUF_INTERNAL_EXPORT_protobuf_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AuthChallenge;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AuthError;
extern PROTOBUF_INTERNAL_EXPORT_protobuf_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto ::google::protobuf::internal::SCCInfo<0> scc_info_AuthResponse;
}  // namespace protobuf_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto
namespace castchannel {
class CastMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<CastMessage>
      _instance;
} _CastMessage_default_instance_;
class AuthChallengeDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthChallenge>
      _instance;
} _AuthChallenge_default_instance_;
class AuthResponseDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthResponse>
      _instance;
} _AuthResponse_default_instance_;
class AuthErrorDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<AuthError>
      _instance;
} _AuthError_default_instance_;
class DeviceAuthMessageDefaultTypeInternal {
 public:
  ::google::protobuf::internal::ExplicitlyConstructed<DeviceAuthMessage>
      _instance;
} _DeviceAuthMessage_default_instance_;
}  // namespace castchannel
namespace protobuf_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto {
static void InitDefaultsCastMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::castchannel::_CastMessage_default_instance_;
    new (ptr) ::castchannel::CastMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::castchannel::CastMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_CastMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsCastMessage}, {}};

static void InitDefaultsAuthChallenge() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::castchannel::_AuthChallenge_default_instance_;
    new (ptr) ::castchannel::AuthChallenge();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::castchannel::AuthChallenge::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AuthChallenge =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAuthChallenge}, {}};

static void InitDefaultsAuthResponse() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::castchannel::_AuthResponse_default_instance_;
    new (ptr) ::castchannel::AuthResponse();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::castchannel::AuthResponse::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AuthResponse =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAuthResponse}, {}};

static void InitDefaultsAuthError() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::castchannel::_AuthError_default_instance_;
    new (ptr) ::castchannel::AuthError();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::castchannel::AuthError::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<0> scc_info_AuthError =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 0, InitDefaultsAuthError}, {}};

static void InitDefaultsDeviceAuthMessage() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::castchannel::_DeviceAuthMessage_default_instance_;
    new (ptr) ::castchannel::DeviceAuthMessage();
    ::google::protobuf::internal::OnShutdownDestroyMessage(ptr);
  }
  ::castchannel::DeviceAuthMessage::InitAsDefaultInstance();
}

::google::protobuf::internal::SCCInfo<3> scc_info_DeviceAuthMessage =
    {{ATOMIC_VAR_INIT(::google::protobuf::internal::SCCInfoBase::kUninitialized), 3, InitDefaultsDeviceAuthMessage}, {
      &protobuf_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto::scc_info_AuthChallenge.base,
      &protobuf_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto::scc_info_AuthResponse.base,
      &protobuf_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto::scc_info_AuthError.base,}};

void InitDefaults() {
  ::google::protobuf::internal::InitSCC(&scc_info_CastMessage.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AuthChallenge.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AuthResponse.base);
  ::google::protobuf::internal::InitSCC(&scc_info_AuthError.base);
  ::google::protobuf::internal::InitSCC(&scc_info_DeviceAuthMessage.base);
}

}  // namespace protobuf_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto
namespace castchannel {
bool CastMessage_ProtocolVersion_IsValid(int value) {
  switch (value) {
    case 0:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CastMessage_ProtocolVersion CastMessage::CASTV2_1_0;
const CastMessage_ProtocolVersion CastMessage::ProtocolVersion_MIN;
const CastMessage_ProtocolVersion CastMessage::ProtocolVersion_MAX;
const int CastMessage::ProtocolVersion_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool CastMessage_PayloadType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const CastMessage_PayloadType CastMessage::STRING;
const CastMessage_PayloadType CastMessage::BINARY;
const CastMessage_PayloadType CastMessage::PayloadType_MIN;
const CastMessage_PayloadType CastMessage::PayloadType_MAX;
const int CastMessage::PayloadType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900
bool AuthError_ErrorType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
      return true;
    default:
      return false;
  }
}

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const AuthError_ErrorType AuthError::INTERNAL_ERROR;
const AuthError_ErrorType AuthError::NO_TLS;
const AuthError_ErrorType AuthError::ErrorType_MIN;
const AuthError_ErrorType AuthError::ErrorType_MAX;
const int AuthError::ErrorType_ARRAYSIZE;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

// ===================================================================

void CastMessage::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int CastMessage::kProtocolVersionFieldNumber;
const int CastMessage::kSourceIdFieldNumber;
const int CastMessage::kDestinationIdFieldNumber;
const int CastMessage::kNamespaceFieldNumber;
const int CastMessage::kPayloadTypeFieldNumber;
const int CastMessage::kPayloadUtf8FieldNumber;
const int CastMessage::kPayloadBinaryFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

CastMessage::CastMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto::scc_info_CastMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:castchannel.CastMessage)
}
CastMessage::CastMessage(const CastMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  source_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_source_id()) {
    source_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_id_);
  }
  destination_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_destination_id()) {
    destination_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_id_);
  }
  namespace__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_namespace_()) {
    namespace__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace__);
  }
  payload_utf8_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload_utf8()) {
    payload_utf8_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_utf8_);
  }
  payload_binary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_payload_binary()) {
    payload_binary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_binary_);
  }
  ::memcpy(&protocol_version_, &from.protocol_version_,
    static_cast<size_t>(reinterpret_cast<char*>(&payload_type_) -
    reinterpret_cast<char*>(&protocol_version_)) + sizeof(payload_type_));
  // @@protoc_insertion_point(copy_constructor:castchannel.CastMessage)
}

void CastMessage::SharedCtor() {
  source_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_id_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_utf8_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_binary_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&protocol_version_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&payload_type_) -
      reinterpret_cast<char*>(&protocol_version_)) + sizeof(payload_type_));
}

CastMessage::~CastMessage() {
  // @@protoc_insertion_point(destructor:castchannel.CastMessage)
  SharedDtor();
}

void CastMessage::SharedDtor() {
  source_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  destination_id_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  namespace__.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_utf8_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  payload_binary_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void CastMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CastMessage& CastMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto::scc_info_CastMessage.base);
  return *internal_default_instance();
}


void CastMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:castchannel.CastMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 31u) {
    if (cached_has_bits & 0x00000001u) {
      source_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      destination_id_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000004u) {
      namespace__.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000008u) {
      payload_utf8_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000010u) {
      payload_binary_.ClearNonDefaultToEmptyNoArena();
    }
  }
  if (cached_has_bits & 96u) {
    ::memset(&protocol_version_, 0, static_cast<size_t>(
        reinterpret_cast<char*>(&payload_type_) -
        reinterpret_cast<char*>(&protocol_version_)) + sizeof(payload_type_));
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool CastMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:castchannel.CastMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .castchannel.CastMessage.ProtocolVersion protocol_version = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::castchannel::CastMessage_ProtocolVersion_IsValid(value)) {
            set_protocol_version(static_cast< ::castchannel::CastMessage_ProtocolVersion >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string source_id = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string destination_id = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_destination_id()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required string namespace = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_namespace_()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required .castchannel.CastMessage.PayloadType payload_type = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::castchannel::CastMessage_PayloadType_IsValid(value)) {
            set_payload_type(static_cast< ::castchannel::CastMessage_PayloadType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(40u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional string payload_utf8 = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payload_utf8()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional bytes payload_binary = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_payload_binary()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:castchannel.CastMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:castchannel.CastMessage)
  return false;
#undef DO_
}

void CastMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:castchannel.CastMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .castchannel.CastMessage.ProtocolVersion protocol_version = 1;
  if (cached_has_bits & 0x00000020u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->protocol_version(), output);
  }

  // required string source_id = 2;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->source_id(), output);
  }

  // required string destination_id = 3;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      3, this->destination_id(), output);
  }

  // required string namespace = 4;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->namespace_(), output);
  }

  // required .castchannel.CastMessage.PayloadType payload_type = 5;
  if (cached_has_bits & 0x00000040u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      5, this->payload_type(), output);
  }

  // optional string payload_utf8 = 6;
  if (cached_has_bits & 0x00000008u) {
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      6, this->payload_utf8(), output);
  }

  // optional bytes payload_binary = 7;
  if (cached_has_bits & 0x00000010u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      7, this->payload_binary(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:castchannel.CastMessage)
}

size_t CastMessage::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:castchannel.CastMessage)
  size_t total_size = 0;

  if (has_source_id()) {
    // required string source_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_id());
  }

  if (has_destination_id()) {
    // required string destination_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destination_id());
  }

  if (has_namespace_()) {
    // required string namespace = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->namespace_());
  }

  if (has_protocol_version()) {
    // required .castchannel.CastMessage.ProtocolVersion protocol_version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol_version());
  }

  if (has_payload_type()) {
    // required .castchannel.CastMessage.PayloadType payload_type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->payload_type());
  }

  return total_size;
}
size_t CastMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:castchannel.CastMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000067) ^ 0x00000067) == 0) {  // All required fields are present.
    // required string source_id = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->source_id());

    // required string destination_id = 3;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->destination_id());

    // required string namespace = 4;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->namespace_());

    // required .castchannel.CastMessage.ProtocolVersion protocol_version = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->protocol_version());

    // required .castchannel.CastMessage.PayloadType payload_type = 5;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->payload_type());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  if (_has_bits_[0 / 32] & 24u) {
    // optional string payload_utf8 = 6;
    if (has_payload_utf8()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->payload_utf8());
    }

    // optional bytes payload_binary = 7;
    if (has_payload_binary()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->payload_binary());
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CastMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const CastMessage*>(&from));
}

void CastMessage::MergeFrom(const CastMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:castchannel.CastMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 127u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_source_id();
      source_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.source_id_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_destination_id();
      destination_id_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.destination_id_);
    }
    if (cached_has_bits & 0x00000004u) {
      set_has_namespace_();
      namespace__.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.namespace__);
    }
    if (cached_has_bits & 0x00000008u) {
      set_has_payload_utf8();
      payload_utf8_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_utf8_);
    }
    if (cached_has_bits & 0x00000010u) {
      set_has_payload_binary();
      payload_binary_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.payload_binary_);
    }
    if (cached_has_bits & 0x00000020u) {
      protocol_version_ = from.protocol_version_;
    }
    if (cached_has_bits & 0x00000040u) {
      payload_type_ = from.payload_type_;
    }
    _has_bits_[0] |= cached_has_bits;
  }
}

void CastMessage::CopyFrom(const CastMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:castchannel.CastMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CastMessage::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000067) != 0x00000067) return false;
  return true;
}

void CastMessage::Swap(CastMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void CastMessage::InternalSwap(CastMessage* other) {
  using std::swap;
  source_id_.Swap(&other->source_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  destination_id_.Swap(&other->destination_id_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  namespace__.Swap(&other->namespace__, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payload_utf8_.Swap(&other->payload_utf8_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  payload_binary_.Swap(&other->payload_binary_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(protocol_version_, other->protocol_version_);
  swap(payload_type_, other->payload_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string CastMessage::GetTypeName() const {
  return "castchannel.CastMessage";
}


// ===================================================================

void AuthChallenge::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthChallenge::AuthChallenge()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto::scc_info_AuthChallenge.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:castchannel.AuthChallenge)
}
AuthChallenge::AuthChallenge(const AuthChallenge& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:castchannel.AuthChallenge)
}

void AuthChallenge::SharedCtor() {
}

AuthChallenge::~AuthChallenge() {
  // @@protoc_insertion_point(destructor:castchannel.AuthChallenge)
  SharedDtor();
}

void AuthChallenge::SharedDtor() {
}

void AuthChallenge::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthChallenge& AuthChallenge::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto::scc_info_AuthChallenge.base);
  return *internal_default_instance();
}


void AuthChallenge::Clear() {
// @@protoc_insertion_point(message_clear_start:castchannel.AuthChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AuthChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:castchannel.AuthChallenge)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
  handle_unusual:
    if (tag == 0) {
      goto success;
    }
    DO_(::google::protobuf::internal::WireFormatLite::SkipField(
        input, tag, &unknown_fields_stream));
  }
success:
  // @@protoc_insertion_point(parse_success:castchannel.AuthChallenge)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:castchannel.AuthChallenge)
  return false;
#undef DO_
}

void AuthChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:castchannel.AuthChallenge)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:castchannel.AuthChallenge)
}

size_t AuthChallenge::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:castchannel.AuthChallenge)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthChallenge::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthChallenge*>(&from));
}

void AuthChallenge::MergeFrom(const AuthChallenge& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:castchannel.AuthChallenge)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

}

void AuthChallenge::CopyFrom(const AuthChallenge& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:castchannel.AuthChallenge)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthChallenge::IsInitialized() const {
  return true;
}

void AuthChallenge::Swap(AuthChallenge* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthChallenge::InternalSwap(AuthChallenge* other) {
  using std::swap;
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AuthChallenge::GetTypeName() const {
  return "castchannel.AuthChallenge";
}


// ===================================================================

void AuthResponse::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthResponse::kSignatureFieldNumber;
const int AuthResponse::kClientAuthCertificateFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthResponse::AuthResponse()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto::scc_info_AuthResponse.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:castchannel.AuthResponse)
}
AuthResponse::AuthResponse(const AuthResponse& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_signature()) {
    signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
  }
  client_auth_certificate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.has_client_auth_certificate()) {
    client_auth_certificate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_auth_certificate_);
  }
  // @@protoc_insertion_point(copy_constructor:castchannel.AuthResponse)
}

void AuthResponse::SharedCtor() {
  signature_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_auth_certificate_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

AuthResponse::~AuthResponse() {
  // @@protoc_insertion_point(destructor:castchannel.AuthResponse)
  SharedDtor();
}

void AuthResponse::SharedDtor() {
  signature_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  client_auth_certificate_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void AuthResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthResponse& AuthResponse::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto::scc_info_AuthResponse.base);
  return *internal_default_instance();
}


void AuthResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:castchannel.AuthResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      signature_.ClearNonDefaultToEmptyNoArena();
    }
    if (cached_has_bits & 0x00000002u) {
      client_auth_certificate_.ClearNonDefaultToEmptyNoArena();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AuthResponse::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:castchannel.AuthResponse)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes signature = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_signature()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // required bytes client_auth_certificate = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_client_auth_certificate()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:castchannel.AuthResponse)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:castchannel.AuthResponse)
  return false;
#undef DO_
}

void AuthResponse::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:castchannel.AuthResponse)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required bytes signature = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      1, this->signature(), output);
  }

  // required bytes client_auth_certificate = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteBytesMaybeAliased(
      2, this->client_auth_certificate(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:castchannel.AuthResponse)
}

size_t AuthResponse::RequiredFieldsByteSizeFallback() const {
// @@protoc_insertion_point(required_fields_byte_size_fallback_start:castchannel.AuthResponse)
  size_t total_size = 0;

  if (has_signature()) {
    // required bytes signature = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());
  }

  if (has_client_auth_certificate()) {
    // required bytes client_auth_certificate = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->client_auth_certificate());
  }

  return total_size;
}
size_t AuthResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:castchannel.AuthResponse)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (((_has_bits_[0] & 0x00000003) ^ 0x00000003) == 0) {  // All required fields are present.
    // required bytes signature = 1;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->signature());

    // required bytes client_auth_certificate = 2;
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::BytesSize(
        this->client_auth_certificate());

  } else {
    total_size += RequiredFieldsByteSizeFallback();
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthResponse::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthResponse*>(&from));
}

void AuthResponse::MergeFrom(const AuthResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:castchannel.AuthResponse)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 3u) {
    if (cached_has_bits & 0x00000001u) {
      set_has_signature();
      signature_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.signature_);
    }
    if (cached_has_bits & 0x00000002u) {
      set_has_client_auth_certificate();
      client_auth_certificate_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.client_auth_certificate_);
    }
  }
}

void AuthResponse::CopyFrom(const AuthResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:castchannel.AuthResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthResponse::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;
  return true;
}

void AuthResponse::Swap(AuthResponse* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthResponse::InternalSwap(AuthResponse* other) {
  using std::swap;
  signature_.Swap(&other->signature_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  client_auth_certificate_.Swap(&other->client_auth_certificate_, &::google::protobuf::internal::GetEmptyStringAlreadyInited(),
    GetArenaNoVirtual());
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AuthResponse::GetTypeName() const {
  return "castchannel.AuthResponse";
}


// ===================================================================

void AuthError::InitAsDefaultInstance() {
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int AuthError::kErrorTypeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

AuthError::AuthError()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto::scc_info_AuthError.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:castchannel.AuthError)
}
AuthError::AuthError(const AuthError& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  error_type_ = from.error_type_;
  // @@protoc_insertion_point(copy_constructor:castchannel.AuthError)
}

void AuthError::SharedCtor() {
  error_type_ = 0;
}

AuthError::~AuthError() {
  // @@protoc_insertion_point(destructor:castchannel.AuthError)
  SharedDtor();
}

void AuthError::SharedDtor() {
}

void AuthError::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const AuthError& AuthError::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto::scc_info_AuthError.base);
  return *internal_default_instance();
}


void AuthError::Clear() {
// @@protoc_insertion_point(message_clear_start:castchannel.AuthError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  error_type_ = 0;
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool AuthError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:castchannel.AuthError)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .castchannel.AuthError.ErrorType error_type = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::castchannel::AuthError_ErrorType_IsValid(value)) {
            set_error_type(static_cast< ::castchannel::AuthError_ErrorType >(value));
          } else {
            unknown_fields_stream.WriteVarint32(8u);
            unknown_fields_stream.WriteVarint32(
                static_cast< ::google::protobuf::uint32>(value));
          }
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:castchannel.AuthError)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:castchannel.AuthError)
  return false;
#undef DO_
}

void AuthError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:castchannel.AuthError)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // required .castchannel.AuthError.ErrorType error_type = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      1, this->error_type(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:castchannel.AuthError)
}

size_t AuthError::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:castchannel.AuthError)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  // required .castchannel.AuthError.ErrorType error_type = 1;
  if (has_error_type()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->error_type());
  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void AuthError::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const AuthError*>(&from));
}

void AuthError::MergeFrom(const AuthError& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:castchannel.AuthError)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_error_type()) {
    set_error_type(from.error_type());
  }
}

void AuthError::CopyFrom(const AuthError& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:castchannel.AuthError)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AuthError::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;
  return true;
}

void AuthError::Swap(AuthError* other) {
  if (other == this) return;
  InternalSwap(other);
}
void AuthError::InternalSwap(AuthError* other) {
  using std::swap;
  swap(error_type_, other->error_type_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string AuthError::GetTypeName() const {
  return "castchannel.AuthError";
}


// ===================================================================

void DeviceAuthMessage::InitAsDefaultInstance() {
  ::castchannel::_DeviceAuthMessage_default_instance_._instance.get_mutable()->challenge_ = const_cast< ::castchannel::AuthChallenge*>(
      ::castchannel::AuthChallenge::internal_default_instance());
  ::castchannel::_DeviceAuthMessage_default_instance_._instance.get_mutable()->response_ = const_cast< ::castchannel::AuthResponse*>(
      ::castchannel::AuthResponse::internal_default_instance());
  ::castchannel::_DeviceAuthMessage_default_instance_._instance.get_mutable()->error_ = const_cast< ::castchannel::AuthError*>(
      ::castchannel::AuthError::internal_default_instance());
}
#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int DeviceAuthMessage::kChallengeFieldNumber;
const int DeviceAuthMessage::kResponseFieldNumber;
const int DeviceAuthMessage::kErrorFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

DeviceAuthMessage::DeviceAuthMessage()
  : ::google::protobuf::MessageLite(), _internal_metadata_(NULL) {
  ::google::protobuf::internal::InitSCC(
      &protobuf_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto::scc_info_DeviceAuthMessage.base);
  SharedCtor();
  // @@protoc_insertion_point(constructor:castchannel.DeviceAuthMessage)
}
DeviceAuthMessage::DeviceAuthMessage(const DeviceAuthMessage& from)
  : ::google::protobuf::MessageLite(),
      _internal_metadata_(NULL),
      _has_bits_(from._has_bits_) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_challenge()) {
    challenge_ = new ::castchannel::AuthChallenge(*from.challenge_);
  } else {
    challenge_ = NULL;
  }
  if (from.has_response()) {
    response_ = new ::castchannel::AuthResponse(*from.response_);
  } else {
    response_ = NULL;
  }
  if (from.has_error()) {
    error_ = new ::castchannel::AuthError(*from.error_);
  } else {
    error_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:castchannel.DeviceAuthMessage)
}

void DeviceAuthMessage::SharedCtor() {
  ::memset(&challenge_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&error_) -
      reinterpret_cast<char*>(&challenge_)) + sizeof(error_));
}

DeviceAuthMessage::~DeviceAuthMessage() {
  // @@protoc_insertion_point(destructor:castchannel.DeviceAuthMessage)
  SharedDtor();
}

void DeviceAuthMessage::SharedDtor() {
  if (this != internal_default_instance()) delete challenge_;
  if (this != internal_default_instance()) delete response_;
  if (this != internal_default_instance()) delete error_;
}

void DeviceAuthMessage::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const DeviceAuthMessage& DeviceAuthMessage::default_instance() {
  ::google::protobuf::internal::InitSCC(&protobuf_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto::scc_info_DeviceAuthMessage.base);
  return *internal_default_instance();
}


void DeviceAuthMessage::Clear() {
// @@protoc_insertion_point(message_clear_start:castchannel.DeviceAuthMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      GOOGLE_DCHECK(challenge_ != NULL);
      challenge_->Clear();
    }
    if (cached_has_bits & 0x00000002u) {
      GOOGLE_DCHECK(response_ != NULL);
      response_->Clear();
    }
    if (cached_has_bits & 0x00000004u) {
      GOOGLE_DCHECK(error_ != NULL);
      error_->Clear();
    }
  }
  _has_bits_.Clear();
  _internal_metadata_.Clear();
}

bool DeviceAuthMessage::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  ::google::protobuf::internal::LiteUnknownFieldSetter unknown_fields_setter(
      &_internal_metadata_);
  ::google::protobuf::io::StringOutputStream unknown_fields_output(
      unknown_fields_setter.buffer());
  ::google::protobuf::io::CodedOutputStream unknown_fields_stream(
      &unknown_fields_output, false);
  // @@protoc_insertion_point(parse_start:castchannel.DeviceAuthMessage)
  for (;;) {
    ::std::pair<::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .castchannel.AuthChallenge challenge = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_challenge()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .castchannel.AuthResponse response = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_response()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // optional .castchannel.AuthError error = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessage(
               input, mutable_error()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormatLite::SkipField(
            input, tag, &unknown_fields_stream));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:castchannel.DeviceAuthMessage)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:castchannel.DeviceAuthMessage)
  return false;
#undef DO_
}

void DeviceAuthMessage::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:castchannel.DeviceAuthMessage)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = _has_bits_[0];
  // optional .castchannel.AuthChallenge challenge = 1;
  if (cached_has_bits & 0x00000001u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      1, this->_internal_challenge(), output);
  }

  // optional .castchannel.AuthResponse response = 2;
  if (cached_has_bits & 0x00000002u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      2, this->_internal_response(), output);
  }

  // optional .castchannel.AuthError error = 3;
  if (cached_has_bits & 0x00000004u) {
    ::google::protobuf::internal::WireFormatLite::WriteMessage(
      3, this->_internal_error(), output);
  }

  output->WriteRaw(_internal_metadata_.unknown_fields().data(),
                   static_cast<int>(_internal_metadata_.unknown_fields().size()));
  // @@protoc_insertion_point(serialize_end:castchannel.DeviceAuthMessage)
}

size_t DeviceAuthMessage::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:castchannel.DeviceAuthMessage)
  size_t total_size = 0;

  total_size += _internal_metadata_.unknown_fields().size();

  if (_has_bits_[0 / 32] & 7u) {
    // optional .castchannel.AuthChallenge challenge = 1;
    if (has_challenge()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *challenge_);
    }

    // optional .castchannel.AuthResponse response = 2;
    if (has_response()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *response_);
    }

    // optional .castchannel.AuthError error = 3;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSize(
          *error_);
    }

  }
  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void DeviceAuthMessage::CheckTypeAndMergeFrom(
    const ::google::protobuf::MessageLite& from) {
  MergeFrom(*::google::protobuf::down_cast<const DeviceAuthMessage*>(&from));
}

void DeviceAuthMessage::MergeFrom(const DeviceAuthMessage& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:castchannel.DeviceAuthMessage)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  cached_has_bits = from._has_bits_[0];
  if (cached_has_bits & 7u) {
    if (cached_has_bits & 0x00000001u) {
      mutable_challenge()->::castchannel::AuthChallenge::MergeFrom(from.challenge());
    }
    if (cached_has_bits & 0x00000002u) {
      mutable_response()->::castchannel::AuthResponse::MergeFrom(from.response());
    }
    if (cached_has_bits & 0x00000004u) {
      mutable_error()->::castchannel::AuthError::MergeFrom(from.error());
    }
  }
}

void DeviceAuthMessage::CopyFrom(const DeviceAuthMessage& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:castchannel.DeviceAuthMessage)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceAuthMessage::IsInitialized() const {
  if (has_response()) {
    if (!this->response_->IsInitialized()) return false;
  }
  if (has_error()) {
    if (!this->error_->IsInitialized()) return false;
  }
  return true;
}

void DeviceAuthMessage::Swap(DeviceAuthMessage* other) {
  if (other == this) return;
  InternalSwap(other);
}
void DeviceAuthMessage::InternalSwap(DeviceAuthMessage* other) {
  using std::swap;
  swap(challenge_, other->challenge_);
  swap(response_, other->response_);
  swap(error_, other->error_);
  swap(_has_bits_[0], other->_has_bits_[0]);
  _internal_metadata_.Swap(&other->_internal_metadata_);
}

::std::string DeviceAuthMessage::GetTypeName() const {
  return "castchannel.DeviceAuthMessage";
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace castchannel
namespace google {
namespace protobuf {
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::castchannel::CastMessage* Arena::CreateMaybeMessage< ::castchannel::CastMessage >(Arena* arena) {
  return Arena::CreateInternal< ::castchannel::CastMessage >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::castchannel::AuthChallenge* Arena::CreateMaybeMessage< ::castchannel::AuthChallenge >(Arena* arena) {
  return Arena::CreateInternal< ::castchannel::AuthChallenge >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::castchannel::AuthResponse* Arena::CreateMaybeMessage< ::castchannel::AuthResponse >(Arena* arena) {
  return Arena::CreateInternal< ::castchannel::AuthResponse >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::castchannel::AuthError* Arena::CreateMaybeMessage< ::castchannel::AuthError >(Arena* arena) {
  return Arena::CreateInternal< ::castchannel::AuthError >(arena);
}
template<> GOOGLE_PROTOBUF_ATTRIBUTE_NOINLINE ::castchannel::DeviceAuthMessage* Arena::CreateMaybeMessage< ::castchannel::DeviceAuthMessage >(Arena* arena) {
  return Arena::CreateInternal< ::castchannel::DeviceAuthMessage >(arena);
}
}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)
