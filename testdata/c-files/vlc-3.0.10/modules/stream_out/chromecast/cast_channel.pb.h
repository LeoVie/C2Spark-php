// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: stream_out/chromecast/cast_channel.proto

#ifndef PROTOBUF_INCLUDED_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto
#define PROTOBUF_INCLUDED_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/message_lite.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_util.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto 

namespace protobuf_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[5];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
}  // namespace protobuf_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto
namespace castchannel {
class AuthChallenge;
class AuthChallengeDefaultTypeInternal;
extern AuthChallengeDefaultTypeInternal _AuthChallenge_default_instance_;
class AuthError;
class AuthErrorDefaultTypeInternal;
extern AuthErrorDefaultTypeInternal _AuthError_default_instance_;
class AuthResponse;
class AuthResponseDefaultTypeInternal;
extern AuthResponseDefaultTypeInternal _AuthResponse_default_instance_;
class CastMessage;
class CastMessageDefaultTypeInternal;
extern CastMessageDefaultTypeInternal _CastMessage_default_instance_;
class DeviceAuthMessage;
class DeviceAuthMessageDefaultTypeInternal;
extern DeviceAuthMessageDefaultTypeInternal _DeviceAuthMessage_default_instance_;
}  // namespace castchannel
namespace google {
namespace protobuf {
template<> ::castchannel::AuthChallenge* Arena::CreateMaybeMessage<::castchannel::AuthChallenge>(Arena*);
template<> ::castchannel::AuthError* Arena::CreateMaybeMessage<::castchannel::AuthError>(Arena*);
template<> ::castchannel::AuthResponse* Arena::CreateMaybeMessage<::castchannel::AuthResponse>(Arena*);
template<> ::castchannel::CastMessage* Arena::CreateMaybeMessage<::castchannel::CastMessage>(Arena*);
template<> ::castchannel::DeviceAuthMessage* Arena::CreateMaybeMessage<::castchannel::DeviceAuthMessage>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace castchannel {

enum CastMessage_ProtocolVersion {
  CastMessage_ProtocolVersion_CASTV2_1_0 = 0
};
bool CastMessage_ProtocolVersion_IsValid(int value);
const CastMessage_ProtocolVersion CastMessage_ProtocolVersion_ProtocolVersion_MIN = CastMessage_ProtocolVersion_CASTV2_1_0;
const CastMessage_ProtocolVersion CastMessage_ProtocolVersion_ProtocolVersion_MAX = CastMessage_ProtocolVersion_CASTV2_1_0;
const int CastMessage_ProtocolVersion_ProtocolVersion_ARRAYSIZE = CastMessage_ProtocolVersion_ProtocolVersion_MAX + 1;

enum CastMessage_PayloadType {
  CastMessage_PayloadType_STRING = 0,
  CastMessage_PayloadType_BINARY = 1
};
bool CastMessage_PayloadType_IsValid(int value);
const CastMessage_PayloadType CastMessage_PayloadType_PayloadType_MIN = CastMessage_PayloadType_STRING;
const CastMessage_PayloadType CastMessage_PayloadType_PayloadType_MAX = CastMessage_PayloadType_BINARY;
const int CastMessage_PayloadType_PayloadType_ARRAYSIZE = CastMessage_PayloadType_PayloadType_MAX + 1;

enum AuthError_ErrorType {
  AuthError_ErrorType_INTERNAL_ERROR = 0,
  AuthError_ErrorType_NO_TLS = 1
};
bool AuthError_ErrorType_IsValid(int value);
const AuthError_ErrorType AuthError_ErrorType_ErrorType_MIN = AuthError_ErrorType_INTERNAL_ERROR;
const AuthError_ErrorType AuthError_ErrorType_ErrorType_MAX = AuthError_ErrorType_NO_TLS;
const int AuthError_ErrorType_ErrorType_ARRAYSIZE = AuthError_ErrorType_ErrorType_MAX + 1;

// ===================================================================

class CastMessage : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:castchannel.CastMessage) */ {
 public:
  CastMessage();
  virtual ~CastMessage();

  CastMessage(const CastMessage& from);

  inline CastMessage& operator=(const CastMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  CastMessage(CastMessage&& from) noexcept
    : CastMessage() {
    *this = ::std::move(from);
  }

  inline CastMessage& operator=(CastMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const CastMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CastMessage* internal_default_instance() {
    return reinterpret_cast<const CastMessage*>(
               &_CastMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(CastMessage* other);
  friend void swap(CastMessage& a, CastMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline CastMessage* New() const final {
    return CreateMaybeMessage<CastMessage>(NULL);
  }

  CastMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<CastMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const CastMessage& from);
  void MergeFrom(const CastMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(CastMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef CastMessage_ProtocolVersion ProtocolVersion;
  static const ProtocolVersion CASTV2_1_0 =
    CastMessage_ProtocolVersion_CASTV2_1_0;
  static inline bool ProtocolVersion_IsValid(int value) {
    return CastMessage_ProtocolVersion_IsValid(value);
  }
  static const ProtocolVersion ProtocolVersion_MIN =
    CastMessage_ProtocolVersion_ProtocolVersion_MIN;
  static const ProtocolVersion ProtocolVersion_MAX =
    CastMessage_ProtocolVersion_ProtocolVersion_MAX;
  static const int ProtocolVersion_ARRAYSIZE =
    CastMessage_ProtocolVersion_ProtocolVersion_ARRAYSIZE;

  typedef CastMessage_PayloadType PayloadType;
  static const PayloadType STRING =
    CastMessage_PayloadType_STRING;
  static const PayloadType BINARY =
    CastMessage_PayloadType_BINARY;
  static inline bool PayloadType_IsValid(int value) {
    return CastMessage_PayloadType_IsValid(value);
  }
  static const PayloadType PayloadType_MIN =
    CastMessage_PayloadType_PayloadType_MIN;
  static const PayloadType PayloadType_MAX =
    CastMessage_PayloadType_PayloadType_MAX;
  static const int PayloadType_ARRAYSIZE =
    CastMessage_PayloadType_PayloadType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required string source_id = 2;
  bool has_source_id() const;
  void clear_source_id();
  static const int kSourceIdFieldNumber = 2;
  const ::std::string& source_id() const;
  void set_source_id(const ::std::string& value);
  #if LANG_CXX11
  void set_source_id(::std::string&& value);
  #endif
  void set_source_id(const char* value);
  void set_source_id(const char* value, size_t size);
  ::std::string* mutable_source_id();
  ::std::string* release_source_id();
  void set_allocated_source_id(::std::string* source_id);

  // required string destination_id = 3;
  bool has_destination_id() const;
  void clear_destination_id();
  static const int kDestinationIdFieldNumber = 3;
  const ::std::string& destination_id() const;
  void set_destination_id(const ::std::string& value);
  #if LANG_CXX11
  void set_destination_id(::std::string&& value);
  #endif
  void set_destination_id(const char* value);
  void set_destination_id(const char* value, size_t size);
  ::std::string* mutable_destination_id();
  ::std::string* release_destination_id();
  void set_allocated_destination_id(::std::string* destination_id);

  // required string namespace = 4;
  bool has_namespace_() const;
  void clear_namespace_();
  static const int kNamespaceFieldNumber = 4;
  const ::std::string& namespace_() const;
  void set_namespace_(const ::std::string& value);
  #if LANG_CXX11
  void set_namespace_(::std::string&& value);
  #endif
  void set_namespace_(const char* value);
  void set_namespace_(const char* value, size_t size);
  ::std::string* mutable_namespace_();
  ::std::string* release_namespace_();
  void set_allocated_namespace_(::std::string* namespace_);

  // optional string payload_utf8 = 6;
  bool has_payload_utf8() const;
  void clear_payload_utf8();
  static const int kPayloadUtf8FieldNumber = 6;
  const ::std::string& payload_utf8() const;
  void set_payload_utf8(const ::std::string& value);
  #if LANG_CXX11
  void set_payload_utf8(::std::string&& value);
  #endif
  void set_payload_utf8(const char* value);
  void set_payload_utf8(const char* value, size_t size);
  ::std::string* mutable_payload_utf8();
  ::std::string* release_payload_utf8();
  void set_allocated_payload_utf8(::std::string* payload_utf8);

  // optional bytes payload_binary = 7;
  bool has_payload_binary() const;
  void clear_payload_binary();
  static const int kPayloadBinaryFieldNumber = 7;
  const ::std::string& payload_binary() const;
  void set_payload_binary(const ::std::string& value);
  #if LANG_CXX11
  void set_payload_binary(::std::string&& value);
  #endif
  void set_payload_binary(const char* value);
  void set_payload_binary(const void* value, size_t size);
  ::std::string* mutable_payload_binary();
  ::std::string* release_payload_binary();
  void set_allocated_payload_binary(::std::string* payload_binary);

  // required .castchannel.CastMessage.ProtocolVersion protocol_version = 1;
  bool has_protocol_version() const;
  void clear_protocol_version();
  static const int kProtocolVersionFieldNumber = 1;
  ::castchannel::CastMessage_ProtocolVersion protocol_version() const;
  void set_protocol_version(::castchannel::CastMessage_ProtocolVersion value);

  // required .castchannel.CastMessage.PayloadType payload_type = 5;
  bool has_payload_type() const;
  void clear_payload_type();
  static const int kPayloadTypeFieldNumber = 5;
  ::castchannel::CastMessage_PayloadType payload_type() const;
  void set_payload_type(::castchannel::CastMessage_PayloadType value);

  // @@protoc_insertion_point(class_scope:castchannel.CastMessage)
 private:
  void set_has_protocol_version();
  void clear_has_protocol_version();
  void set_has_source_id();
  void clear_has_source_id();
  void set_has_destination_id();
  void clear_has_destination_id();
  void set_has_namespace_();
  void clear_has_namespace_();
  void set_has_payload_type();
  void clear_has_payload_type();
  void set_has_payload_utf8();
  void clear_has_payload_utf8();
  void set_has_payload_binary();
  void clear_has_payload_binary();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr source_id_;
  ::google::protobuf::internal::ArenaStringPtr destination_id_;
  ::google::protobuf::internal::ArenaStringPtr namespace__;
  ::google::protobuf::internal::ArenaStringPtr payload_utf8_;
  ::google::protobuf::internal::ArenaStringPtr payload_binary_;
  int protocol_version_;
  int payload_type_;
  friend struct ::protobuf_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuthChallenge : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:castchannel.AuthChallenge) */ {
 public:
  AuthChallenge();
  virtual ~AuthChallenge();

  AuthChallenge(const AuthChallenge& from);

  inline AuthChallenge& operator=(const AuthChallenge& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthChallenge(AuthChallenge&& from) noexcept
    : AuthChallenge() {
    *this = ::std::move(from);
  }

  inline AuthChallenge& operator=(AuthChallenge&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AuthChallenge& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthChallenge* internal_default_instance() {
    return reinterpret_cast<const AuthChallenge*>(
               &_AuthChallenge_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  void Swap(AuthChallenge* other);
  friend void swap(AuthChallenge& a, AuthChallenge& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthChallenge* New() const final {
    return CreateMaybeMessage<AuthChallenge>(NULL);
  }

  AuthChallenge* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthChallenge>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AuthChallenge& from);
  void MergeFrom(const AuthChallenge& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthChallenge* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:castchannel.AuthChallenge)
 private:

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuthResponse : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:castchannel.AuthResponse) */ {
 public:
  AuthResponse();
  virtual ~AuthResponse();

  AuthResponse(const AuthResponse& from);

  inline AuthResponse& operator=(const AuthResponse& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthResponse(AuthResponse&& from) noexcept
    : AuthResponse() {
    *this = ::std::move(from);
  }

  inline AuthResponse& operator=(AuthResponse&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AuthResponse& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthResponse* internal_default_instance() {
    return reinterpret_cast<const AuthResponse*>(
               &_AuthResponse_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  void Swap(AuthResponse* other);
  friend void swap(AuthResponse& a, AuthResponse& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthResponse* New() const final {
    return CreateMaybeMessage<AuthResponse>(NULL);
  }

  AuthResponse* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthResponse>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AuthResponse& from);
  void MergeFrom(const AuthResponse& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthResponse* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes signature = 1;
  bool has_signature() const;
  void clear_signature();
  static const int kSignatureFieldNumber = 1;
  const ::std::string& signature() const;
  void set_signature(const ::std::string& value);
  #if LANG_CXX11
  void set_signature(::std::string&& value);
  #endif
  void set_signature(const char* value);
  void set_signature(const void* value, size_t size);
  ::std::string* mutable_signature();
  ::std::string* release_signature();
  void set_allocated_signature(::std::string* signature);

  // required bytes client_auth_certificate = 2;
  bool has_client_auth_certificate() const;
  void clear_client_auth_certificate();
  static const int kClientAuthCertificateFieldNumber = 2;
  const ::std::string& client_auth_certificate() const;
  void set_client_auth_certificate(const ::std::string& value);
  #if LANG_CXX11
  void set_client_auth_certificate(::std::string&& value);
  #endif
  void set_client_auth_certificate(const char* value);
  void set_client_auth_certificate(const void* value, size_t size);
  ::std::string* mutable_client_auth_certificate();
  ::std::string* release_client_auth_certificate();
  void set_allocated_client_auth_certificate(::std::string* client_auth_certificate);

  // @@protoc_insertion_point(class_scope:castchannel.AuthResponse)
 private:
  void set_has_signature();
  void clear_has_signature();
  void set_has_client_auth_certificate();
  void clear_has_client_auth_certificate();

  // helper for ByteSizeLong()
  size_t RequiredFieldsByteSizeFallback() const;

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::google::protobuf::internal::ArenaStringPtr signature_;
  ::google::protobuf::internal::ArenaStringPtr client_auth_certificate_;
  friend struct ::protobuf_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class AuthError : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:castchannel.AuthError) */ {
 public:
  AuthError();
  virtual ~AuthError();

  AuthError(const AuthError& from);

  inline AuthError& operator=(const AuthError& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  AuthError(AuthError&& from) noexcept
    : AuthError() {
    *this = ::std::move(from);
  }

  inline AuthError& operator=(AuthError&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const AuthError& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const AuthError* internal_default_instance() {
    return reinterpret_cast<const AuthError*>(
               &_AuthError_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  void Swap(AuthError* other);
  friend void swap(AuthError& a, AuthError& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline AuthError* New() const final {
    return CreateMaybeMessage<AuthError>(NULL);
  }

  AuthError* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<AuthError>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const AuthError& from);
  void MergeFrom(const AuthError& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(AuthError* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  typedef AuthError_ErrorType ErrorType;
  static const ErrorType INTERNAL_ERROR =
    AuthError_ErrorType_INTERNAL_ERROR;
  static const ErrorType NO_TLS =
    AuthError_ErrorType_NO_TLS;
  static inline bool ErrorType_IsValid(int value) {
    return AuthError_ErrorType_IsValid(value);
  }
  static const ErrorType ErrorType_MIN =
    AuthError_ErrorType_ErrorType_MIN;
  static const ErrorType ErrorType_MAX =
    AuthError_ErrorType_ErrorType_MAX;
  static const int ErrorType_ARRAYSIZE =
    AuthError_ErrorType_ErrorType_ARRAYSIZE;

  // accessors -------------------------------------------------------

  // required .castchannel.AuthError.ErrorType error_type = 1;
  bool has_error_type() const;
  void clear_error_type();
  static const int kErrorTypeFieldNumber = 1;
  ::castchannel::AuthError_ErrorType error_type() const;
  void set_error_type(::castchannel::AuthError_ErrorType value);

  // @@protoc_insertion_point(class_scope:castchannel.AuthError)
 private:
  void set_has_error_type();
  void clear_has_error_type();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  int error_type_;
  friend struct ::protobuf_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class DeviceAuthMessage : public ::google::protobuf::MessageLite /* @@protoc_insertion_point(class_definition:castchannel.DeviceAuthMessage) */ {
 public:
  DeviceAuthMessage();
  virtual ~DeviceAuthMessage();

  DeviceAuthMessage(const DeviceAuthMessage& from);

  inline DeviceAuthMessage& operator=(const DeviceAuthMessage& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  DeviceAuthMessage(DeviceAuthMessage&& from) noexcept
    : DeviceAuthMessage() {
    *this = ::std::move(from);
  }

  inline DeviceAuthMessage& operator=(DeviceAuthMessage&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  inline const ::std::string& unknown_fields() const {
    return _internal_metadata_.unknown_fields();
  }
  inline ::std::string* mutable_unknown_fields() {
    return _internal_metadata_.mutable_unknown_fields();
  }

  static const DeviceAuthMessage& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const DeviceAuthMessage* internal_default_instance() {
    return reinterpret_cast<const DeviceAuthMessage*>(
               &_DeviceAuthMessage_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  void Swap(DeviceAuthMessage* other);
  friend void swap(DeviceAuthMessage& a, DeviceAuthMessage& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline DeviceAuthMessage* New() const final {
    return CreateMaybeMessage<DeviceAuthMessage>(NULL);
  }

  DeviceAuthMessage* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<DeviceAuthMessage>(arena);
  }
  void CheckTypeAndMergeFrom(const ::google::protobuf::MessageLite& from)
    final;
  void CopyFrom(const DeviceAuthMessage& from);
  void MergeFrom(const DeviceAuthMessage& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  void DiscardUnknownFields();
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  void InternalSwap(DeviceAuthMessage* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::std::string GetTypeName() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .castchannel.AuthChallenge challenge = 1;
  bool has_challenge() const;
  void clear_challenge();
  static const int kChallengeFieldNumber = 1;
  private:
  const ::castchannel::AuthChallenge& _internal_challenge() const;
  public:
  const ::castchannel::AuthChallenge& challenge() const;
  ::castchannel::AuthChallenge* release_challenge();
  ::castchannel::AuthChallenge* mutable_challenge();
  void set_allocated_challenge(::castchannel::AuthChallenge* challenge);

  // optional .castchannel.AuthResponse response = 2;
  bool has_response() const;
  void clear_response();
  static const int kResponseFieldNumber = 2;
  private:
  const ::castchannel::AuthResponse& _internal_response() const;
  public:
  const ::castchannel::AuthResponse& response() const;
  ::castchannel::AuthResponse* release_response();
  ::castchannel::AuthResponse* mutable_response();
  void set_allocated_response(::castchannel::AuthResponse* response);

  // optional .castchannel.AuthError error = 3;
  bool has_error() const;
  void clear_error();
  static const int kErrorFieldNumber = 3;
  private:
  const ::castchannel::AuthError& _internal_error() const;
  public:
  const ::castchannel::AuthError& error() const;
  ::castchannel::AuthError* release_error();
  ::castchannel::AuthError* mutable_error();
  void set_allocated_error(::castchannel::AuthError* error);

  // @@protoc_insertion_point(class_scope:castchannel.DeviceAuthMessage)
 private:
  void set_has_challenge();
  void clear_has_challenge();
  void set_has_response();
  void clear_has_response();
  void set_has_error();
  void clear_has_error();

  ::google::protobuf::internal::InternalMetadataWithArenaLite _internal_metadata_;
  ::google::protobuf::internal::HasBits<1> _has_bits_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  ::castchannel::AuthChallenge* challenge_;
  ::castchannel::AuthResponse* response_;
  ::castchannel::AuthError* error_;
  friend struct ::protobuf_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// CastMessage

// required .castchannel.CastMessage.ProtocolVersion protocol_version = 1;
inline bool CastMessage::has_protocol_version() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CastMessage::set_has_protocol_version() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CastMessage::clear_has_protocol_version() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CastMessage::clear_protocol_version() {
  protocol_version_ = 0;
  clear_has_protocol_version();
}
inline ::castchannel::CastMessage_ProtocolVersion CastMessage::protocol_version() const {
  // @@protoc_insertion_point(field_get:castchannel.CastMessage.protocol_version)
  return static_cast< ::castchannel::CastMessage_ProtocolVersion >(protocol_version_);
}
inline void CastMessage::set_protocol_version(::castchannel::CastMessage_ProtocolVersion value) {
  assert(::castchannel::CastMessage_ProtocolVersion_IsValid(value));
  set_has_protocol_version();
  protocol_version_ = value;
  // @@protoc_insertion_point(field_set:castchannel.CastMessage.protocol_version)
}

// required string source_id = 2;
inline bool CastMessage::has_source_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CastMessage::set_has_source_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CastMessage::clear_has_source_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CastMessage::clear_source_id() {
  source_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_source_id();
}
inline const ::std::string& CastMessage::source_id() const {
  // @@protoc_insertion_point(field_get:castchannel.CastMessage.source_id)
  return source_id_.GetNoArena();
}
inline void CastMessage::set_source_id(const ::std::string& value) {
  set_has_source_id();
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:castchannel.CastMessage.source_id)
}
#if LANG_CXX11
inline void CastMessage::set_source_id(::std::string&& value) {
  set_has_source_id();
  source_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:castchannel.CastMessage.source_id)
}
#endif
inline void CastMessage::set_source_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_source_id();
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:castchannel.CastMessage.source_id)
}
inline void CastMessage::set_source_id(const char* value, size_t size) {
  set_has_source_id();
  source_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:castchannel.CastMessage.source_id)
}
inline ::std::string* CastMessage::mutable_source_id() {
  set_has_source_id();
  // @@protoc_insertion_point(field_mutable:castchannel.CastMessage.source_id)
  return source_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CastMessage::release_source_id() {
  // @@protoc_insertion_point(field_release:castchannel.CastMessage.source_id)
  if (!has_source_id()) {
    return NULL;
  }
  clear_has_source_id();
  return source_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CastMessage::set_allocated_source_id(::std::string* source_id) {
  if (source_id != NULL) {
    set_has_source_id();
  } else {
    clear_has_source_id();
  }
  source_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), source_id);
  // @@protoc_insertion_point(field_set_allocated:castchannel.CastMessage.source_id)
}

// required string destination_id = 3;
inline bool CastMessage::has_destination_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CastMessage::set_has_destination_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CastMessage::clear_has_destination_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CastMessage::clear_destination_id() {
  destination_id_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_destination_id();
}
inline const ::std::string& CastMessage::destination_id() const {
  // @@protoc_insertion_point(field_get:castchannel.CastMessage.destination_id)
  return destination_id_.GetNoArena();
}
inline void CastMessage::set_destination_id(const ::std::string& value) {
  set_has_destination_id();
  destination_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:castchannel.CastMessage.destination_id)
}
#if LANG_CXX11
inline void CastMessage::set_destination_id(::std::string&& value) {
  set_has_destination_id();
  destination_id_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:castchannel.CastMessage.destination_id)
}
#endif
inline void CastMessage::set_destination_id(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_destination_id();
  destination_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:castchannel.CastMessage.destination_id)
}
inline void CastMessage::set_destination_id(const char* value, size_t size) {
  set_has_destination_id();
  destination_id_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:castchannel.CastMessage.destination_id)
}
inline ::std::string* CastMessage::mutable_destination_id() {
  set_has_destination_id();
  // @@protoc_insertion_point(field_mutable:castchannel.CastMessage.destination_id)
  return destination_id_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CastMessage::release_destination_id() {
  // @@protoc_insertion_point(field_release:castchannel.CastMessage.destination_id)
  if (!has_destination_id()) {
    return NULL;
  }
  clear_has_destination_id();
  return destination_id_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CastMessage::set_allocated_destination_id(::std::string* destination_id) {
  if (destination_id != NULL) {
    set_has_destination_id();
  } else {
    clear_has_destination_id();
  }
  destination_id_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), destination_id);
  // @@protoc_insertion_point(field_set_allocated:castchannel.CastMessage.destination_id)
}

// required string namespace = 4;
inline bool CastMessage::has_namespace_() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CastMessage::set_has_namespace_() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CastMessage::clear_has_namespace_() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CastMessage::clear_namespace_() {
  namespace__.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_namespace_();
}
inline const ::std::string& CastMessage::namespace_() const {
  // @@protoc_insertion_point(field_get:castchannel.CastMessage.namespace)
  return namespace__.GetNoArena();
}
inline void CastMessage::set_namespace_(const ::std::string& value) {
  set_has_namespace_();
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:castchannel.CastMessage.namespace)
}
#if LANG_CXX11
inline void CastMessage::set_namespace_(::std::string&& value) {
  set_has_namespace_();
  namespace__.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:castchannel.CastMessage.namespace)
}
#endif
inline void CastMessage::set_namespace_(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_namespace_();
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:castchannel.CastMessage.namespace)
}
inline void CastMessage::set_namespace_(const char* value, size_t size) {
  set_has_namespace_();
  namespace__.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:castchannel.CastMessage.namespace)
}
inline ::std::string* CastMessage::mutable_namespace_() {
  set_has_namespace_();
  // @@protoc_insertion_point(field_mutable:castchannel.CastMessage.namespace)
  return namespace__.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CastMessage::release_namespace_() {
  // @@protoc_insertion_point(field_release:castchannel.CastMessage.namespace)
  if (!has_namespace_()) {
    return NULL;
  }
  clear_has_namespace_();
  return namespace__.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CastMessage::set_allocated_namespace_(::std::string* namespace_) {
  if (namespace_ != NULL) {
    set_has_namespace_();
  } else {
    clear_has_namespace_();
  }
  namespace__.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), namespace_);
  // @@protoc_insertion_point(field_set_allocated:castchannel.CastMessage.namespace)
}

// required .castchannel.CastMessage.PayloadType payload_type = 5;
inline bool CastMessage::has_payload_type() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CastMessage::set_has_payload_type() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CastMessage::clear_has_payload_type() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CastMessage::clear_payload_type() {
  payload_type_ = 0;
  clear_has_payload_type();
}
inline ::castchannel::CastMessage_PayloadType CastMessage::payload_type() const {
  // @@protoc_insertion_point(field_get:castchannel.CastMessage.payload_type)
  return static_cast< ::castchannel::CastMessage_PayloadType >(payload_type_);
}
inline void CastMessage::set_payload_type(::castchannel::CastMessage_PayloadType value) {
  assert(::castchannel::CastMessage_PayloadType_IsValid(value));
  set_has_payload_type();
  payload_type_ = value;
  // @@protoc_insertion_point(field_set:castchannel.CastMessage.payload_type)
}

// optional string payload_utf8 = 6;
inline bool CastMessage::has_payload_utf8() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CastMessage::set_has_payload_utf8() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CastMessage::clear_has_payload_utf8() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CastMessage::clear_payload_utf8() {
  payload_utf8_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload_utf8();
}
inline const ::std::string& CastMessage::payload_utf8() const {
  // @@protoc_insertion_point(field_get:castchannel.CastMessage.payload_utf8)
  return payload_utf8_.GetNoArena();
}
inline void CastMessage::set_payload_utf8(const ::std::string& value) {
  set_has_payload_utf8();
  payload_utf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:castchannel.CastMessage.payload_utf8)
}
#if LANG_CXX11
inline void CastMessage::set_payload_utf8(::std::string&& value) {
  set_has_payload_utf8();
  payload_utf8_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:castchannel.CastMessage.payload_utf8)
}
#endif
inline void CastMessage::set_payload_utf8(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_payload_utf8();
  payload_utf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:castchannel.CastMessage.payload_utf8)
}
inline void CastMessage::set_payload_utf8(const char* value, size_t size) {
  set_has_payload_utf8();
  payload_utf8_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:castchannel.CastMessage.payload_utf8)
}
inline ::std::string* CastMessage::mutable_payload_utf8() {
  set_has_payload_utf8();
  // @@protoc_insertion_point(field_mutable:castchannel.CastMessage.payload_utf8)
  return payload_utf8_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CastMessage::release_payload_utf8() {
  // @@protoc_insertion_point(field_release:castchannel.CastMessage.payload_utf8)
  if (!has_payload_utf8()) {
    return NULL;
  }
  clear_has_payload_utf8();
  return payload_utf8_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CastMessage::set_allocated_payload_utf8(::std::string* payload_utf8) {
  if (payload_utf8 != NULL) {
    set_has_payload_utf8();
  } else {
    clear_has_payload_utf8();
  }
  payload_utf8_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload_utf8);
  // @@protoc_insertion_point(field_set_allocated:castchannel.CastMessage.payload_utf8)
}

// optional bytes payload_binary = 7;
inline bool CastMessage::has_payload_binary() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CastMessage::set_has_payload_binary() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CastMessage::clear_has_payload_binary() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CastMessage::clear_payload_binary() {
  payload_binary_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_payload_binary();
}
inline const ::std::string& CastMessage::payload_binary() const {
  // @@protoc_insertion_point(field_get:castchannel.CastMessage.payload_binary)
  return payload_binary_.GetNoArena();
}
inline void CastMessage::set_payload_binary(const ::std::string& value) {
  set_has_payload_binary();
  payload_binary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:castchannel.CastMessage.payload_binary)
}
#if LANG_CXX11
inline void CastMessage::set_payload_binary(::std::string&& value) {
  set_has_payload_binary();
  payload_binary_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:castchannel.CastMessage.payload_binary)
}
#endif
inline void CastMessage::set_payload_binary(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_payload_binary();
  payload_binary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:castchannel.CastMessage.payload_binary)
}
inline void CastMessage::set_payload_binary(const void* value, size_t size) {
  set_has_payload_binary();
  payload_binary_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:castchannel.CastMessage.payload_binary)
}
inline ::std::string* CastMessage::mutable_payload_binary() {
  set_has_payload_binary();
  // @@protoc_insertion_point(field_mutable:castchannel.CastMessage.payload_binary)
  return payload_binary_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* CastMessage::release_payload_binary() {
  // @@protoc_insertion_point(field_release:castchannel.CastMessage.payload_binary)
  if (!has_payload_binary()) {
    return NULL;
  }
  clear_has_payload_binary();
  return payload_binary_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void CastMessage::set_allocated_payload_binary(::std::string* payload_binary) {
  if (payload_binary != NULL) {
    set_has_payload_binary();
  } else {
    clear_has_payload_binary();
  }
  payload_binary_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), payload_binary);
  // @@protoc_insertion_point(field_set_allocated:castchannel.CastMessage.payload_binary)
}

// -------------------------------------------------------------------

// AuthChallenge

// -------------------------------------------------------------------

// AuthResponse

// required bytes signature = 1;
inline bool AuthResponse::has_signature() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthResponse::set_has_signature() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthResponse::clear_has_signature() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthResponse::clear_signature() {
  signature_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_signature();
}
inline const ::std::string& AuthResponse::signature() const {
  // @@protoc_insertion_point(field_get:castchannel.AuthResponse.signature)
  return signature_.GetNoArena();
}
inline void AuthResponse::set_signature(const ::std::string& value) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:castchannel.AuthResponse.signature)
}
#if LANG_CXX11
inline void AuthResponse::set_signature(::std::string&& value) {
  set_has_signature();
  signature_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:castchannel.AuthResponse.signature)
}
#endif
inline void AuthResponse::set_signature(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:castchannel.AuthResponse.signature)
}
inline void AuthResponse::set_signature(const void* value, size_t size) {
  set_has_signature();
  signature_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:castchannel.AuthResponse.signature)
}
inline ::std::string* AuthResponse::mutable_signature() {
  set_has_signature();
  // @@protoc_insertion_point(field_mutable:castchannel.AuthResponse.signature)
  return signature_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthResponse::release_signature() {
  // @@protoc_insertion_point(field_release:castchannel.AuthResponse.signature)
  if (!has_signature()) {
    return NULL;
  }
  clear_has_signature();
  return signature_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthResponse::set_allocated_signature(::std::string* signature) {
  if (signature != NULL) {
    set_has_signature();
  } else {
    clear_has_signature();
  }
  signature_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), signature);
  // @@protoc_insertion_point(field_set_allocated:castchannel.AuthResponse.signature)
}

// required bytes client_auth_certificate = 2;
inline bool AuthResponse::has_client_auth_certificate() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AuthResponse::set_has_client_auth_certificate() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AuthResponse::clear_has_client_auth_certificate() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AuthResponse::clear_client_auth_certificate() {
  client_auth_certificate_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  clear_has_client_auth_certificate();
}
inline const ::std::string& AuthResponse::client_auth_certificate() const {
  // @@protoc_insertion_point(field_get:castchannel.AuthResponse.client_auth_certificate)
  return client_auth_certificate_.GetNoArena();
}
inline void AuthResponse::set_client_auth_certificate(const ::std::string& value) {
  set_has_client_auth_certificate();
  client_auth_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:castchannel.AuthResponse.client_auth_certificate)
}
#if LANG_CXX11
inline void AuthResponse::set_client_auth_certificate(::std::string&& value) {
  set_has_client_auth_certificate();
  client_auth_certificate_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:castchannel.AuthResponse.client_auth_certificate)
}
#endif
inline void AuthResponse::set_client_auth_certificate(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  set_has_client_auth_certificate();
  client_auth_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:castchannel.AuthResponse.client_auth_certificate)
}
inline void AuthResponse::set_client_auth_certificate(const void* value, size_t size) {
  set_has_client_auth_certificate();
  client_auth_certificate_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:castchannel.AuthResponse.client_auth_certificate)
}
inline ::std::string* AuthResponse::mutable_client_auth_certificate() {
  set_has_client_auth_certificate();
  // @@protoc_insertion_point(field_mutable:castchannel.AuthResponse.client_auth_certificate)
  return client_auth_certificate_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* AuthResponse::release_client_auth_certificate() {
  // @@protoc_insertion_point(field_release:castchannel.AuthResponse.client_auth_certificate)
  if (!has_client_auth_certificate()) {
    return NULL;
  }
  clear_has_client_auth_certificate();
  return client_auth_certificate_.ReleaseNonDefaultNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void AuthResponse::set_allocated_client_auth_certificate(::std::string* client_auth_certificate) {
  if (client_auth_certificate != NULL) {
    set_has_client_auth_certificate();
  } else {
    clear_has_client_auth_certificate();
  }
  client_auth_certificate_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), client_auth_certificate);
  // @@protoc_insertion_point(field_set_allocated:castchannel.AuthResponse.client_auth_certificate)
}

// -------------------------------------------------------------------

// AuthError

// required .castchannel.AuthError.ErrorType error_type = 1;
inline bool AuthError::has_error_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AuthError::set_has_error_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AuthError::clear_has_error_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AuthError::clear_error_type() {
  error_type_ = 0;
  clear_has_error_type();
}
inline ::castchannel::AuthError_ErrorType AuthError::error_type() const {
  // @@protoc_insertion_point(field_get:castchannel.AuthError.error_type)
  return static_cast< ::castchannel::AuthError_ErrorType >(error_type_);
}
inline void AuthError::set_error_type(::castchannel::AuthError_ErrorType value) {
  assert(::castchannel::AuthError_ErrorType_IsValid(value));
  set_has_error_type();
  error_type_ = value;
  // @@protoc_insertion_point(field_set:castchannel.AuthError.error_type)
}

// -------------------------------------------------------------------

// DeviceAuthMessage

// optional .castchannel.AuthChallenge challenge = 1;
inline bool DeviceAuthMessage::has_challenge() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeviceAuthMessage::set_has_challenge() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeviceAuthMessage::clear_has_challenge() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeviceAuthMessage::clear_challenge() {
  if (challenge_ != NULL) challenge_->Clear();
  clear_has_challenge();
}
inline const ::castchannel::AuthChallenge& DeviceAuthMessage::_internal_challenge() const {
  return *challenge_;
}
inline const ::castchannel::AuthChallenge& DeviceAuthMessage::challenge() const {
  const ::castchannel::AuthChallenge* p = challenge_;
  // @@protoc_insertion_point(field_get:castchannel.DeviceAuthMessage.challenge)
  return p != NULL ? *p : *reinterpret_cast<const ::castchannel::AuthChallenge*>(
      &::castchannel::_AuthChallenge_default_instance_);
}
inline ::castchannel::AuthChallenge* DeviceAuthMessage::release_challenge() {
  // @@protoc_insertion_point(field_release:castchannel.DeviceAuthMessage.challenge)
  clear_has_challenge();
  ::castchannel::AuthChallenge* temp = challenge_;
  challenge_ = NULL;
  return temp;
}
inline ::castchannel::AuthChallenge* DeviceAuthMessage::mutable_challenge() {
  set_has_challenge();
  if (challenge_ == NULL) {
    auto* p = CreateMaybeMessage<::castchannel::AuthChallenge>(GetArenaNoVirtual());
    challenge_ = p;
  }
  // @@protoc_insertion_point(field_mutable:castchannel.DeviceAuthMessage.challenge)
  return challenge_;
}
inline void DeviceAuthMessage::set_allocated_challenge(::castchannel::AuthChallenge* challenge) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete challenge_;
  }
  if (challenge) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      challenge = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, challenge, submessage_arena);
    }
    set_has_challenge();
  } else {
    clear_has_challenge();
  }
  challenge_ = challenge;
  // @@protoc_insertion_point(field_set_allocated:castchannel.DeviceAuthMessage.challenge)
}

// optional .castchannel.AuthResponse response = 2;
inline bool DeviceAuthMessage::has_response() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void DeviceAuthMessage::set_has_response() {
  _has_bits_[0] |= 0x00000002u;
}
inline void DeviceAuthMessage::clear_has_response() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void DeviceAuthMessage::clear_response() {
  if (response_ != NULL) response_->Clear();
  clear_has_response();
}
inline const ::castchannel::AuthResponse& DeviceAuthMessage::_internal_response() const {
  return *response_;
}
inline const ::castchannel::AuthResponse& DeviceAuthMessage::response() const {
  const ::castchannel::AuthResponse* p = response_;
  // @@protoc_insertion_point(field_get:castchannel.DeviceAuthMessage.response)
  return p != NULL ? *p : *reinterpret_cast<const ::castchannel::AuthResponse*>(
      &::castchannel::_AuthResponse_default_instance_);
}
inline ::castchannel::AuthResponse* DeviceAuthMessage::release_response() {
  // @@protoc_insertion_point(field_release:castchannel.DeviceAuthMessage.response)
  clear_has_response();
  ::castchannel::AuthResponse* temp = response_;
  response_ = NULL;
  return temp;
}
inline ::castchannel::AuthResponse* DeviceAuthMessage::mutable_response() {
  set_has_response();
  if (response_ == NULL) {
    auto* p = CreateMaybeMessage<::castchannel::AuthResponse>(GetArenaNoVirtual());
    response_ = p;
  }
  // @@protoc_insertion_point(field_mutable:castchannel.DeviceAuthMessage.response)
  return response_;
}
inline void DeviceAuthMessage::set_allocated_response(::castchannel::AuthResponse* response) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete response_;
  }
  if (response) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      response = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, response, submessage_arena);
    }
    set_has_response();
  } else {
    clear_has_response();
  }
  response_ = response;
  // @@protoc_insertion_point(field_set_allocated:castchannel.DeviceAuthMessage.response)
}

// optional .castchannel.AuthError error = 3;
inline bool DeviceAuthMessage::has_error() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void DeviceAuthMessage::set_has_error() {
  _has_bits_[0] |= 0x00000004u;
}
inline void DeviceAuthMessage::clear_has_error() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void DeviceAuthMessage::clear_error() {
  if (error_ != NULL) error_->Clear();
  clear_has_error();
}
inline const ::castchannel::AuthError& DeviceAuthMessage::_internal_error() const {
  return *error_;
}
inline const ::castchannel::AuthError& DeviceAuthMessage::error() const {
  const ::castchannel::AuthError* p = error_;
  // @@protoc_insertion_point(field_get:castchannel.DeviceAuthMessage.error)
  return p != NULL ? *p : *reinterpret_cast<const ::castchannel::AuthError*>(
      &::castchannel::_AuthError_default_instance_);
}
inline ::castchannel::AuthError* DeviceAuthMessage::release_error() {
  // @@protoc_insertion_point(field_release:castchannel.DeviceAuthMessage.error)
  clear_has_error();
  ::castchannel::AuthError* temp = error_;
  error_ = NULL;
  return temp;
}
inline ::castchannel::AuthError* DeviceAuthMessage::mutable_error() {
  set_has_error();
  if (error_ == NULL) {
    auto* p = CreateMaybeMessage<::castchannel::AuthError>(GetArenaNoVirtual());
    error_ = p;
  }
  // @@protoc_insertion_point(field_mutable:castchannel.DeviceAuthMessage.error)
  return error_;
}
inline void DeviceAuthMessage::set_allocated_error(::castchannel::AuthError* error) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete error_;
  }
  if (error) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      error = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, error, submessage_arena);
    }
    set_has_error();
  } else {
    clear_has_error();
  }
  error_ = error;
  // @@protoc_insertion_point(field_set_allocated:castchannel.DeviceAuthMessage.error)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace castchannel

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::castchannel::CastMessage_ProtocolVersion> : ::std::true_type {};
template <> struct is_proto_enum< ::castchannel::CastMessage_PayloadType> : ::std::true_type {};
template <> struct is_proto_enum< ::castchannel::AuthError_ErrorType> : ::std::true_type {};

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_stream_5fout_2fchromecast_2fcast_5fchannel_2eproto
